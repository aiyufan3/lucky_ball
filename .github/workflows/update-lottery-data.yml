name: 更新彩票数据和分析报告

on:
  schedule:
    # 每天晚上23:00 (UTC+8) 运行，对应 15:00 UTC
    - cron: '0 15 * * *'
  workflow_dispatch: # 允许手动触发
  push:
    branches: [ main ]  # 推送到main分支时触发
  pull_request:
    branches: [ main ]  # PR合并到main分支时触发
    types: [ closed ]   # 只在PR关闭时触发

permissions:
  contents: write

jobs:
  update-lottery-data:
    runs-on: ubuntu-latest
    env:
      HEARTBEAT: "true"   # 若希望仅在真实数据变化时提交，将其改为 "false"
      # 网络重试配置
      MAX_RETRIES: 5
      RETRY_DELAY: 10
      NETWORK_TIMEOUT: 60
      # Git配置
      GIT_AUTHOR_NAME: "github-actions[bot]"
      GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
      GIT_COMMITTER_NAME: "github-actions[bot]"
      GIT_COMMITTER_EMAIL: "github-actions[bot]@users.noreply.github.com"
    # 确保PR只在合并时运行，而不是简单关闭时运行
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true

    steps:
    - name: 网络连接检测
      id: network_check
      run: |
        echo "🔍 检测网络连接状态..."
        
        # 测试基本网络连接
        if ping -c 3 8.8.8.8 >/dev/null 2>&1; then
          echo "✅ 基本网络连接正常"
          echo "network_status=ok" >> $GITHUB_OUTPUT
        else
          echo "❌ 基本网络连接失败"
          echo "network_status=failed" >> $GITHUB_OUTPUT
        fi
        
        # 测试DNS解析
        if nslookup www.cwl.gov.cn >/dev/null 2>&1; then
          echo "✅ DNS解析正常"
          echo "dns_status=ok" >> $GITHUB_OUTPUT
        else
          echo "❌ DNS解析失败"
          echo "dns_status=failed" >> $GITHUB_OUTPUT
        fi
        
        # 测试API可达性
        if curl -s --connect-timeout 10 --max-time 30 "https://www.cwl.gov.cn" >/dev/null 2>&1; then
          echo "✅ 彩票官网可达"
          echo "api_status=ok" >> $GITHUB_OUTPUT
        else
          echo "❌ 彩票官网不可达"
          echo "api_status=failed" >> $GITHUB_OUTPUT
        fi

    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        # 确保检出深度足够，避免浅克隆问题
        fetch-depth: 0

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 缓存pip依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 安装依赖
      run: |
        echo "📦 安装Python依赖包..."
        
        # 升级pip
        python -m pip install --upgrade pip
        
        # 安装核心依赖（带重试机制）
        for i in {1..${{ env.MAX_RETRIES }}}; do
          echo "尝试安装依赖 (第 $i 次)..."
          if pip install requests pandas numpy matplotlib seaborn beautifulsoup4 hjson DrissionPage scipy statsmodels; then
            echo "✅ 核心依赖安装成功"
            break
          else
            echo "❌ 第 $i 次安装失败"
            if [ $i -lt ${{ env.MAX_RETRIES }} ]; then
              echo "等待 ${{ env.RETRY_DELAY }} 秒后重试..."
              sleep ${{ env.RETRY_DELAY }}
            else
              echo "❌ 所有重试都失败，退出"
              exit 1
            fi
          fi
        done

        # 安装 CPU 版 PyTorch（避免 CUDA 依赖，带重试）
        echo "🧠 安装PyTorch CPU版本..."
        for i in {1..3}; do
          if pip install torch --index-url https://download.pytorch.org/whl/cpu; then
            echo "✅ PyTorch安装成功"
            break
          else
            echo "❌ PyTorch安装失败 (第 $i 次)"
            if [ $i -lt 3 ]; then
              sleep 10
            fi
          fi
        done

        echo "✅ 所有依赖安装完成"

    - name: 网络状态验证
      if: steps.network_check.outputs.network_status == 'failed' || steps.network_check.outputs.api_status == 'failed'
      run: |
        echo "⚠️ 网络状态异常，尝试网络修复..."
        
        # 尝试刷新DNS缓存
        if command -v systemd-resolve >/dev/null 2>&1; then
          sudo systemd-resolve --flush-caches || true
        fi
        
        # 等待网络恢复
        echo "等待网络恢复..."
        sleep 30
        
        # 重新测试网络
        if ping -c 3 8.8.8.8 >/dev/null 2>&1; then
          echo "✅ 网络已恢复"
        else
          echo "❌ 网络仍未恢复，但继续执行..."
        fi

    - name: 运行数据抓取与分析 (双色球 + 快乐8)
      run: |
        echo "🚀 开始运行数据分析..."
        export MPLBACKEND=Agg
        mkdir -p data reports pics
        exit_code=0
        
        # 设置环境变量
        export PYTHONUNBUFFERED=1
        export PYTHONIOENCODING=utf-8
        
        # 网络重试函数
        retry_with_backoff() {
          local max_attempts=${{ env.MAX_RETRIES }}
          local delay=${{ env.RETRY_DELAY }}
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔄 尝试执行 $1 (第 $attempt 次)..."
            
            if eval "$1"; then
              echo "✅ $1 执行成功"
              return 0
            else
              echo "❌ $1 执行失败 (第 $attempt 次)"
              
              if [ $attempt -lt $max_attempts ]; then
                echo "⏳ 等待 ${delay} 秒后重试..."
                sleep $delay
                delay=$((delay * 2))  # 指数退避
              fi
              
              attempt=$((attempt + 1))
            fi
          done
          
          echo "❌ $1 在 $max_attempts 次尝试后仍然失败"
          return 1
        }

        # 运行双色球分析（带重试）
        if [ -f "main.py" ]; then
          echo "[SSQ] 运行 main.py ..."
          retry_with_backoff "python main.py" || exit_code=$?
        elif [ -f "scripts/lottery_analyzer.py" ]; then
          echo "[SSQ] 运行 scripts/lottery_analyzer.py ..."
          retry_with_backoff "python scripts/lottery_analyzer.py" || exit_code=$?
        elif [ -f "lottery_analyzer.py" ]; then
          echo "[SSQ] 运行 lottery_analyzer.py ..."
          retry_with_backoff "python lottery_analyzer.py" || exit_code=$?
        else
          echo "[SSQ] 未找到入口 (main.py 或 lottery_analyzer.py)，跳过"
        fi

        # 运行快乐8分析（带重试）
        if [ -f "scripts/super_eight.py" ]; then
          echo "[KL8] 运行 scripts/super_eight.py ..."
          retry_with_backoff "python scripts/super_eight.py --fetch --limit 200 --recommend 5 --plots --plots_dual --report --plan --budget 22 --price_per_bet 2 --seed 42" || exit_code=$?
        elif [ -f "super_eight.py" ]; then
          echo "[KL8] 运行 super_eight.py ..."
          retry_with_backoff "python super_eight.py --fetch --limit 200 --recommend 5 --plots --plots_dual --report --plan --budget 22 --price_per_bet 2 --seed 42" || exit_code=$?
        else
          echo "[KL8] 未找到 super_eight.py，跳过"
        fi

        echo "📊 分析完成，退出码: $exit_code"
        
        # 即使有错误也继续执行，避免整个工作流失败
        if [ $exit_code -ne 0 ]; then
          echo "⚠️ 部分分析失败，但继续执行后续步骤..."
        fi

        if [ "$HEARTBEAT" = "true" ]; then
          mkdir -p .github
          date -u +"%Y-%m-%dT%H:%M:%SZ" > .github/.last_run_utc.txt
          echo "已写入心跳文件 .github/.last_run_utc.txt"
        fi

        echo "继续到文件变更检查步骤..."

    - name: 检查文件变更
      id: check_changes
      run: |
        echo "🔍 检查文件变更..."
        # 仅在这些目录/文件存在时再比较
        TARGETS=()
        for p in data reports pics; do
          [ -e "$p" ] && TARGETS+=("$p")
        done
        [ -f ".github/.last_run_utc.txt" ] && TARGETS+=(".github/.last_run_utc.txt")
        [ -f "data/kl8_history.json" ] && TARGETS+=("data/kl8_history.json")
        [ -f "reports/kl8_analysis_report.md" ] && TARGETS+=("reports/kl8_analysis_report.md")
        [ -f "reports/kl8_profit_plan.md" ] && TARGETS+=("reports/kl8_profit_plan.md")
        [ -f "pics/kl8_frequency_hist.png" ] && TARGETS+=("pics/kl8_frequency_hist.png")
        [ -f "pics/kl8_ema_heatmap.png" ] && TARGETS+=("pics/kl8_ema_heatmap.png")
        [ -f "pics/kl8_overlap_compare.png" ] && TARGETS+=("pics/kl8_overlap_compare.png")
        [ -f "pics/kl8_dual_frequency_style.png" ] && TARGETS+=("pics/kl8_dual_frequency_style.png")
        [ -f "reports/colorballs_analysis_report.md" ] && TARGETS+=("reports/colorballs_analysis_report.md")
        [ -f "pics/lottery_frequency_analysis.png" ] && TARGETS+=("pics/lottery_frequency_analysis.png")
        if [ ${#TARGETS[@]} -eq 0 ]; then
          echo "未找到 data/ reports/ pics/ 目录或文件，视为无变化"
          echo "changed=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        CHANGED=false

        # 1) 检测未跟踪(新)文件
        # 不使用 --exclude-standard，保证即使被 .gitignore 忽略的文件也能被检测到
        UNTRACKED=$(git ls-files --others -- "${TARGETS[@]}")
        if [ -n "$UNTRACKED" ]; then
          echo "发现未跟踪文件:"
          echo "$UNTRACKED"
          CHANGED=true
        fi

        # 2) 检测已跟踪文件的修改/删除
        if ! git diff --exit-code -- "${TARGETS[@]}" >/dev/null 2>&1; then
          echo "发现已跟踪文件修改/删除"
          CHANGED=true
        fi

        if [ "$CHANGED" = true ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: 提交更新
      if: steps.check_changes.outputs.changed == 'true'
      run: |
        echo "📝 准备提交文件变更..."
        
        # 配置Git用户身份（GitHub Actions）
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        echo "使用Git配置: $(git config user.name) <$(git config user.email)>"
        
        # 显示当前Git状态
        echo "🔍 当前Git状态:"
        git status --porcelain || echo "无法获取Git状态"
        
        # 添加文件到暂存区
        [ -e "data" ] && git add -A data || echo "data 目录不存在"
        [ -e "reports" ] && git add -A reports || echo "reports 目录不存在"
        [ -e "pics" ] && git add -A pics || echo "pics 目录不存在"

        # 强制添加被 .gitignore 忽略但需要提交的自动生成物
        [ -f "data/lottery_data.json" ] && git add -f data/lottery_data.json || true
        [ -f "data/kl8_history.json" ] && git add -f data/kl8_history.json || true
        [ -f "data/lottery_aggregated_data.hjson" ] && git add -f data/lottery_aggregated_data.hjson || true
        # reports 下的 Markdown（存在时再添加，避免 glob 展开失败）
        ls reports/*.md >/dev/null 2>&1 && git add -f reports/*.md || true
        # 需要发布到仓库的图片（存在时再添加）
        [ -f "pics/lottery_frequency_analysis.png" ] && git add -f pics/lottery_frequency_analysis.png || true
        [ -f "pics/kl8_frequency_hist.png" ] && git add -f pics/kl8_frequency_hist.png || true
        [ -f "pics/kl8_ema_heatmap.png" ] && git add -f pics/kl8_ema_heatmap.png || true
        [ -f "pics/kl8_overlap_compare.png" ] && git add -f pics/kl8_overlap_compare.png || true
        [ -f "pics/kl8_dual_frequency_style.png" ] && git add -f pics/kl8_dual_frequency_style.png || true
        [ -f ".github/.last_run_utc.txt" ] && git add .github/.last_run_utc.txt

        # 显示暂存区状态
        echo "📋 暂存区状态:"
        git diff --cached --name-only || echo "无法获取暂存区状态"

        if git diff --cached --quiet; then
          echo "没有文件需要提交"
          exit 0
        fi

        commit_message="Update lottery data and analysis reports - $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S') (UTC+8)"
        echo "💾 提交信息: $commit_message"
        
        # 提交代码
        if git commit -m "$commit_message"; then
          echo "✅ 代码提交成功"
        else
          echo "❌ 代码提交失败"
          exit 1
        fi
        
        # 推送时也使用重试机制
        for i in {1..3}; do
          echo "🚀 尝试推送代码 (第 $i 次)..."
          if git push; then
            echo "✅ 代码推送成功"
            break
          else
            echo "❌ 推送失败 (第 $i 次)"
            if [ $i -lt 3 ]; then
              echo "⏳ 等待 10 秒后重试..."
              sleep 10
            else
              echo "❌ 推送失败，但继续执行后续步骤"
            fi
          fi
        done
        
        echo "🎉 文件提交和推送流程完成"

    - name: 创建重大更新的发布版本
      if: steps.check_changes.outputs.changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🏷️ 准备创建发布版本..."
        TAG_NAME="$(TZ='Asia/Shanghai' date +'%Y%m%d')"

        # 先同步远端 tags，避免重复推送时报错
        git fetch --tags --quiet || true

        if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
          echo "Tag $TAG_NAME 已存在于远端，跳过创建发布版本"
          exit 0
        fi

        git tag -f $TAG_NAME
        git push -f origin $TAG_NAME

        NOTES=$'## 🎯 彩票数据更新 - '"$(TZ='Asia/Shanghai' date +'%Y年%m月%d日')"$' (UTC+8)\n\n'
        NOTES+=$'### 📊 本次更新内容\n'
        NOTES+=$'- 抓取最新开奖数据（双色球/快乐8）\n'
        NOTES+=$'- 更新统计分析图表\n'
        NOTES+=$'- 刷新号码频率与报告\n\n'
        NOTES+=$'### 📁 更新文件\n'
        NOTES+=$'**双色球数据：**\n'
        NOTES+=$'- data/lottery_data.json - 双色球开奖数据\n'
        NOTES+=$'- data/lottery_aggregated_data.hjson - 双色球聚合分析数据\n'
        NOTES+=$'- pics/lottery_frequency_analysis.png - 双色球频率图表\n\n'
        NOTES+=$'**快乐8数据：**\n'
        NOTES+=$'- data/kl8_history.json - 快乐8开奖数据\n'
        NOTES+=$'- reports/kl8_analysis_report.md - 快乐8分析报告\n'
        NOTES+=$'- pics/kl8_frequency_hist.png, pics/kl8_ema_heatmap.png, pics/kl8_overlap_compare.png, pics/kl8_dual_frequency_style.png\n\n'
        NOTES+=$'### ⚠️ 免责声明\n'
        NOTES+=$'本数据仅供学习和统计分析使用，彩票开奖完全随机，请理性购彩。\n'

        upload_files=""
        [ -f "data/lottery_data.json" ] && upload_files="$upload_files data/lottery_data.json"
        [ -f "data/lottery_aggregated_data.hjson" ] && upload_files="$upload_files data/lottery_aggregated_data.hjson"
        # SSQ reports (support both names)
        [ -f "reports/colorballs_analysis_report.md" ] && upload_files="$upload_files reports/colorballs_analysis_report.md"
        [ -f "pics/lottery_frequency_analysis.png" ] && upload_files="$upload_files pics/lottery_frequency_analysis.png"

        # KL8 artifacts
        [ -f "data/kl8_history.json" ] && upload_files="$upload_files data/kl8_history.json"
        [ -f "reports/kl8_analysis_report.md" ] && upload_files="$upload_files reports/kl8_analysis_report.md"
        [ -f "pics/kl8_frequency_hist.png" ] && upload_files="$upload_files pics/kl8_frequency_hist.png"
        [ -f "pics/kl8_ema_heatmap.png" ] && upload_files="$upload_files pics/kl8_ema_heatmap.png"
        [ -f "pics/kl8_overlap_compare.png" ] && upload_files="$upload_files pics/kl8_overlap_compare.png"
        [ -f "pics/kl8_dual_frequency_style.png" ] && upload_files="$upload_files pics/kl8_dual_frequency_style.png"

        if command -v gh >/dev/null 2>&1; then
          if [ -n "$upload_files" ]; then
            gh release create $TAG_NAME \
              --title "彩票数据更新 $TAG_NAME" \
              --notes "$NOTES" \
              $upload_files
            echo "发布版本创建成功，包含文件: $upload_files"
          else
            gh release create $TAG_NAME \
              --title "彩票数据更新 $TAG_NAME" \
              --notes "$NOTES"
            echo "发布版本创建成功，但没有数据文件可上传"
          fi
        else
          echo "⚠️ 未安装 gh CLI，跳过创建发布版本。"
        fi

    - name: 输出结果
      run: |
        echo "🎯 工作流执行结果总结"
        echo "================================"
        
        if [ "${{ steps.check_changes.outputs.changed }}" == "true" ]; then
          echo "✅ 彩票数据已更新并提交 - $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S') (UTC+8)"
          echo "📁 更新的文件:"
          [ -f "data/lottery_data.json" ] && echo "  ✓ 双色球开奖数据"
          [ -f "reports/colorballs_analysis_report.md" ] && echo "  ✓ 双色球分析报告 (colorballs_analysis_report.md)"
          [ -f "pics/lottery_frequency_analysis.png" ] && echo "  ✓ 双色球频率图表 (lottery_frequency_analysis.png)"
          [ -f ".github/.last_run_utc.txt" ] && echo "  ✓ 心跳文件 (.github/.last_run_utc.txt)"
          
          # 显示Git提交信息
          echo ""
          echo "📝 最近的Git提交:"
          git log --oneline -3 || echo "无法获取Git提交历史"
        else
          echo "ℹ️ 彩票数据无变化，跳过提交 - $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S') (UTC+8)"
        fi
        
        echo ""
        echo "🌐 网络状态总结:"
        echo "  网络连接: ${{ steps.network_check.outputs.network_status }}"
        echo "  DNS解析: ${{ steps.network_check.outputs.dns_status }}"
        echo "  API可达: ${{ steps.network_check.outputs.api_status }}"
        
        echo ""
        echo "🤖 执行用户: github-actions[bot]"
        echo "⏰ 执行时间: $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S') (UTC+8)"
        echo "================================"